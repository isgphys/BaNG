#!/usr/bin/env perl
use strict;
use warnings;
use Cwd qw( abs_path );
use File::Basename;
use Getopt::Long qw( :config no_auto_abbrev );

use lib dirname( abs_path($0) ) . '/lib';
use BaNG::Config;
use BaNG::BackupServer;
use BaNG::Reporting;
use BaNG::TM_rsync;
use BaNG::TM_lts;
use BaNG::TM_lftp;
use BaNG::BTRFS;
use BaNG::Wipe;

my $version = '7.7-neoBaNG1';
my $prefix_arg;
my ($host_arg, $group_arg, $nthreads_arg, $bkpmode_arg);
my ($cron, $wipe, $xymononly);
my ($initial, $force, $noreport, $missingonly);
my ($taskid, $taskmeta);
my ($verbose_arg, $vv_arg, $vvv_arg);
my $dryrun_arg;

#################################
# Main
#
# Ich hasse es wirklich wie alles hier implizit gemacht wird
parse_command_options();
get_serverconfig($prefix_arg);
cli_args_override_global_config();

print "BaNG run in $serverconfig{bkpmode} mode!\n" if $serverconfig{verbose};

$cron = $ENV{'BaNG_Cron'} || "0";
print "Run as Cron: $cron\n" if $serverconfig{verbose};

if (!-d "/run/BaNG") {
    mkdir "/run/BaNG",0770 unless $serverconfig{dryrun};
}

$taskid = create_timeid( $host_arg, $group_arg );
# maybe todo: change that to some sort of dispatch instead of if-else
# maybe even based on plug-in modules ? (pipe dream)
if ( $serverconfig{bkpmode} eq "rsync") {

    bangstat_set_taskmeta( $taskid, $host_arg, $group_arg, $cron, $taskmeta) unless ( $wipe || $xymononly );
    get_host_config( $host_arg, $group_arg );

    foreach my $config ( sort keys %hosts ) {
        my $host  = $hosts{$config}->{hostname};
        my $group = $hosts{$config}->{group};

        if ($wipe) {
            wipe( $host, $group, $taskid, $force );
        } elsif ($xymononly) {
            my %RecentBackups = bangstat_recentbackups($host);
            xymon_report( $taskid, $host, $group, %RecentBackups );
        } else {
            next unless pre_queue_checks( $taskid, $host_arg, $group_arg, $host, $group, $initial, $missingonly, $noreport );
            queue_rsync_backup( $host_arg, $group_arg, $host, $group, $initial, $missingonly, $noreport, $taskid, $dryrun_arg, $cron );
        }
    }

    if ( !@queue ) {
        print "Exit because queue is empty.\n" if ( $serverconfig{verbose} && !$wipe );
        exit 0;
    }

    reorder_queue_by_priority( $taskid, $host_arg, $group_arg );

    run_rsync_threads($host_arg, $group_arg, $nthreads_arg, $dryrun_arg, $cron);

    logit( $taskid, $host_arg, $group_arg, "Task $taskid finished!" );

    exit 0;

} elsif ( $serverconfig{bkpmode} eq "lts" ) {
    print "LTS mode work\n" if $serverconfig{verbose};

    get_lts_config( $group_arg );
    queue_lts_backup( $group_arg, $noreport, $taskid );

    if ( !@queue ) {
        print "Exit because queue is empty.\n" if $serverconfig{verbose};
        exit 0;
    }

    run_lts_threads($taskid, $group_arg, $nthreads_arg, $dryrun_arg);

    exit 0;
} elsif ( $serverconfig{bkpmode} eq "lftp" ) {
    _vsay("LFTP mode work.");
    get_host_config($host_arg,$group_arg);
    bangstat_set_taskmeta( $taskid, $host_arg, $group_arg, $cron, $taskmeta) unless ( $wipe || $xymononly );
# no implicit confusing nonsense
    my @queue;
    queue_lftp_backup($dryrun_arg,\%hosts,\@queue,$host_arg,$group_arg, $noreport, $taskid, \%serverconfig );
    foreach my $j (@queue) {
    print "$j\n";
    }

    if ( !@queue ) {
        _vsay("Exit because queue is empty.");
        exit 0;
    }

    run_lftp_threads(\@queue, $nthreads_arg, $dryrun_arg, \%hosts);
    _vsay("Don't forget to follow up this job with an rsync run!");
    exit 0;
}
sub _vsay {
    my $msg = shift;
    print "$msg\n" if $serverconfig{verbose};
}

#################################
# Command line arguments
#
sub parse_command_options {

    GetOptions(
        'help'             => sub { usage('') },
        'version'          => sub { usage("Current version number: $version") },
        'v|verbose'        => \$verbose_arg,
        'vv'               => \$vv_arg,
        'vvv'              => \$vvv_arg,
        'bkpmode=s'        => \$bkpmode_arg,
        'n|dry-run'        => \$dryrun_arg,
        'g|group=s'        => \$group_arg,
        'h|host=s'         => \$host_arg,
        'p|prefix=s'       => \$prefix_arg,
        't|threads=i'      => \$nthreads_arg,
        'w|wipe'           => \$wipe,
        'initial'          => \$initial,
        'force'            => \$force,
        'missingonly'      => \$missingonly,
        'label=s'          => \$taskmeta,
        'xymon'            => \$xymononly,
        'noreport'         => \$noreport,
    ) or usage('Invalid commmand line options.');
    usage('You must provide some arguments') unless ( $host_arg || $group_arg );
    usage('Number of threads must be positive') if ( $nthreads_arg && $nthreads_arg <= 0 );
    usage('Wrong Backup Mode, please use rsync, lftp or lts') unless ( !defined $bkpmode_arg  || ($bkpmode_arg eq "rsync" || $bkpmode_arg eq "lts" || $bkpmode_arg eq "lftp"));

    $verbose_arg = 1 if ( $dryrun_arg || $vv_arg || $vvv_arg );

    return 1;
}

sub cli_args_override_global_config {

    $serverconfig{bkpmode}      = $bkpmode_arg if $bkpmode_arg;
    $serverconfig{verbose}      = $verbose_arg if $verbose_arg;
    $serverconfig{dryrun}       = $dryrun_arg  if $dryrun_arg;
    $serverconfig{verboselevel} = 2            if $vv_arg;
    $serverconfig{verboselevel} = 3            if $vvv_arg;

    return 1;
}

sub usage {
    my ($message) = @_;

    if ( defined $message && length $message ) {
        $message .= "\n"
            unless $message =~ /\n$/;
    }

    my $command = $0;
    $command =~ s#^.*/##;

    print <<"EOF";
        $message
        Usage Examples:

        $command -h <host> -g <group> # back up given host and group
        $command -h <host>            # back up all groups of given host
        $command -g <group>           # back up all hosts of given group
        $command --help               # show this help message
        $command --version            # show version number and help

        Optional Arguments:

        -t <nr>                     # number of threads, default: 1
        -p <path>                   # override path to folder containing etc/
        -w | --wipe                 # wipe the backup
        -w --force                  # forcing wipe the backup (override auto_wipe_limit)
        --bkpmode <rsync|lts|lftp>       # select backup mode (rsync / lts / lftp), default: rsync
        --initial                   # create nonexisting backup targets
        --missingonly               # backup only hosts that were not backed up recently
        --label <string>            # set a label for this task
        --xymon                     # send only xymon report
        --noreport                  # do not send any report
        -v | -vv | -vvv             # verbose mode to include debugging messages of level 1-3
        -n                          # dry-run without making changes (implies verbose)

EOF

    exit 0;
}
